/*
 * ------------------
 * Token Declarations
 * ------------------
 *
 * Note that `token`s define formats that should be persisted in transitions.
 * Fields can be of type Role, File, Literal, a specific literal, a token type
 * or a union of any of these
 */

token InitiatedCert {
  hydrogen_owner: Role,
  proposed_energy_owner: Role,
  hydrogen_amount: Literal,
}

token IssuedCert {
  hydrogen_owner: Role,
  energy_owner: Role,
  embodied_co2: Literal,
}

/*
 * ---------------------
 * Function Declarations
 * ---------------------
 *
 * Note that `fn`s define process flow restrictions and consist of a set of
 * inputs, a set of outputs and a set of additional conditions.
 * public `fn` will be published as a process flow (`fn`s can also be private)
 */

pub fn process_initiate_cert || => |output: InitiatedCert| where {
  output.hydrogen_owner == sender,
  output.proposed_energy_owner != sender,
  output.hydrogen_amount: Literal,
}

pub fn process_issue_cert |input: InitiatedCert| => |output: IssuedCert| where {
  input.hydrogen_owner == output.hydrogen_owner,
  output.hydrogen_owner != sender,
  output.energy_owner == sender,
  output.embodied_co2: Literal,
}
